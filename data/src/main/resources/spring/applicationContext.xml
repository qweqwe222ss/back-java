<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">

	<!--********************************************配置hibernate******************************************** -->

	<!--扫描配置文件(这里指向的是之前配置的那个config.properties) -->
	<context:property-placeholder
		location="classpath:config.properties" />

	<!--配置数据源 -->
    <bean name="dataSource" class="kernel.druid.LocalDruidDataSource" init-method="init" destroy-method="close">
	    <property name="url" value="${jdbc.url}" />
	    <property name="username" value="${jdbc.username}" />
	    <property name="password" value="${jdbc.password}" />
	
	    <!-- 初始化连接大小 -->
	    <property name="initialSize" value="10" />
	    <!-- 连接池最大使用连接数量 -->
	    <property name="maxActive" value="50" />
	    <!-- 连接池最大空闲 -->
	    <!-- <property name="maxIdle" value="20" /> -->
	    <!-- 连接池最小空闲 -->
	    <property name="minIdle" value="1" />
	    <!-- 获取连接最大等待时间 -->
	    <property name="maxWait" value="60000" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	    <property name="testWhileIdle" value="true" />
	
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	    <property name="minEvictableIdleTimeMillis" value="25200000" />
	
	    <!-- 打开removeAbandoned功能 -->
	    <property name="removeAbandoned" value="true" />
	    <!-- 1800秒，也就是30分钟 -->
	    <property name="removeAbandonedTimeout" value="1800" />
	    <!-- 关闭abanded连接时输出错误日志 -->
	    <property name="logAbandoned" value="true" />
	
	    <!-- 监控数据库 -->
	    <property name="filters" value="stat" />
    </bean>

	<!--配置session工厂 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>   <!--指定数据库方言 -->
				<prop key="hibernate.show_sql">false</prop>     <!--在控制台显示执行的数据库操作语句 -->
				<prop key="hibernate.format_sql">false</prop>     <!--在控制台显示执行的数据哭操作语句（格式） -->
			</props>
		</property>
			<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:/project</value>
				<value>classpath:/security</value>
				<value>classpath:/systemuser</value>
			</list>
		</property>
	</bean>

	<!-- 事物管理器配置 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 配置事务拦截器Bean -->
	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<!-- 为事务拦截器bean注入一个事物管理器 -->
		<property name="transactionManager" ref="transactionManager"></property>
		<property name="transactionAttributes">
			<!-- 定义事务传播属性 -->
			<props>
				<prop key="add*">PROPAGATION_REQUIRED</prop>
				<prop key="save*">PROPAGATION_REQUIRED</prop>
				<prop key="insert*">PROPAGATION_REQUIRED</prop>

				<prop key="remove*">PROPAGATION_REQUIRED</prop>
				<prop key="delete*">PROPAGATION_REQUIRED</prop>
				<prop key="reset">PROPAGATION_REQUIRED</prop>

				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="runInTransaction">PROPAGATION_REQUIRED</prop>

				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="list*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="paged*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="query*">PROPAGATION_REQUIRED,readOnly</prop>

			</props>
		</property>
	</bean>
	<!-- 定义BeanNameAutoProxyCreator -->
	<bean
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<!-- 需要自动创建事务代理的bean -->
			<list>
				<value>transactionMethodFragmentFun</value>
				<!-- data -->
				<!-- cms -->
				<value>cmsService</value>
				<value>CmsLoadCacheService</value>
				<!-- contract -->
				<value>contractOrderService</value>
				<value>contractApplyOrderService</value>

				<!-- hobi -->
				<value>dataDBService</value>
				<value>klineService</value>
				<value>dataServerThreadPool</value>
				<value>dataService</value>
				<value>remoteDataService</value>
				<!-- item -->
				<value>itemService</value>
				<!-- log -->
				<value>logService</value>
				<value>codeLogService</value>
				<value>moneyLogService</value>
				<value>sysLogService</value>
				<value>orderLogService</value>
				<value>walletDayService</value>

				<!-- brush -->
				<value>brushOrdersService</value>

				<!-- news -->
				<value>newsService</value>
				<!-- security -->
				<value>secUserService</value>
				<!-- wallet -->
				<value>walletService</value>
				<value>walletLogService</value>
				<value>exchangeRateService</value>
				<value>walletDao</value>
				<value>walletConsumeServer</value>
				<value>walletExtendConsumeServer</value>
				<!-- syspara -->
				<value>sysparaService</value>
				<!-- party -->
				<value>partyService</value>
				<value>userRecomService</value>
				<value>roleService</value>
				<!-- information -->
				<value>informationService</value>
				<value>tipService</value>


				<!-- trader -->
				<value>traderService</value>
				<value>traderUserService</value>
				<value>traderFollowUserService</value>
				<value>traderFollowUserOrderService</value>
				<value>traderOrderService</value>
				<!-- autoMonitor -->
				<value>autoMonitorWalletService</value>
				<value>autoMonitorOrderService</value>
				<value>autoMonitorDAppLogService</value>
				<value>autoMonitorPoolDataService</value>

				<value>pledgeConfigService</value>
				<value>userRateConfigService</value>
				<value>pledgeGalaxyOrderService</value>
				<value>pledgeGalaxyProfitService</value>

				<value>userDataService</value>
				<value>autoMonitorAutoTransferFromConfigService</value>
				<value>autoMonitorTipService</value>
				<value>onlineChatMessageService</value>
				<value>onlineChatVisitorMessageService</value>
				<value>onlineChatUserMessageService</value>
				<value>adminCustomerService</value>
				<value>customerService</value>
				
				
				
				<value>autoMonitorAddressConfigService</value>
				<value>pledgeOrderService</value>
				<value>dAppUserDataSumService</value>
				<value>pledgeService</value>
				<value>exchangeApplyOrderService</value>
				
				
				<value>adminChannelBlockchainService</value>
				<value>channelBlockchainService</value>	
				
				<value>adminSystemUserService</value>

				<value>rechargeBlockchainService</value>
				<value>goodsOrdersService</value>
				<value>sellerGoodsService</value>
				<value>comboService</value>
				<value>adminSellerService</value>

				<value>moneyFreezeService</value>
				<value>rechargeBonusService</value>
				<value>goodsStatisticsService</value>
				<value>tokenService</value>
				<value>kycService</value>
				<value>userService</value>


				<!-- notification -->
				<value>notificationService</value>
				<value>notificationTemplateService</value>
			</list>
		</property>
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
				<!-- 可增加其它的interceptor -->
			</list>
		</property>
	</bean>

	<!--Hibernate模板定义 -->
	<bean id="hibernateTemplate"
		class="org.springframework.orm.hibernate5.HibernateTemplate">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>

	<bean id="namedParameterJdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg index="0">
			<ref bean="dataSource" />
		</constructor-arg>
	</bean>

	<!--JDBC模板定义 -->
	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>
</beans>